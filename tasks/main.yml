---
- name: Include OS family specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include OS specific tasks
  include_tasks: "{{ ansible_os_family }}.yml"

- name: Install packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ citus_packages }}"

- name: Check if PG_VERSION exists
  stat:
    path: "{{ postgresql_data_path }}/PG_VERSION"
  register: pg_version

- name: Initialize the system database
  shell: /usr/pgsql-10/bin/postgresql-10-setup initdb
  args:
    executable: /bin/bash
  when: not pg_version.stat.exists

- name: Check if shared_preload_libraries already exists in postgresql.conf
  shell: >
    grep "^shared_preload_libraries" {{ postgresql_conf_path }}/postgresql.conf
  args:
    executable: /bin/bash
  register: shared_preload_libraries_return
  check_mode: no
  ignore_errors: yes
  changed_when: no

- name: Add the shared_preload_libraries config for enabling the citus shared libraries (New Line)
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: ^shared_preload_libraries =
    insertafter: '^# Add settings for extensions here'
    line: shared_preload_libraries = 'citus'
    backup: yes
  when: shared_preload_libraries_return.rc == 1
  notify: Restart postgresql

- name: Update the shared_preload_libraries config for enabling the citus shared libraries (Existing Line)
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: ^((?=shared_preload_libraries)(?!.*citus).*\s*=\s*'.*)('.*)
    line: \1, citus\2
    backrefs: yes
    backup: yes
  when: shared_preload_libraries_return.rc == 0
  notify: Restart postgresql

- name: Configure postgresql to listen on all IP interfaces
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: "^listen_addresses = '*'"
    insertafter: "^#listen_addresses = 'localhost'"
    line: "listen_addresses = '*'"
  notify: Restart postgresql

- name: Configure the postgresql access permissions
  blockinfile:
    path: "{{ postgresql_conf_path }}/pg_hba.conf"
    insertafter: EOF
    block: |
      # Allow unrestricted access to nodes in the local network. The following ranges
      # correspond to 24, 20, and 16-bit blocks in Private IPv4 address spaces.
      host    all             all             {{ citus_trusted_subnet }}              trust

      # Also allow the host unrestricted access to connect to itself
      host    all             all             127.0.0.1/32            trust
      host    all             all             ::1/128                 trust
  notify: Restart postgresql

- name: Ensure postgresql service is started and enabled on boot
  systemd:
    name: "{{ postgresql_service }}"
    state: started
    enabled: yes

- name: Restart postgresql if needed
  meta: flush_handlers

- name: Get a list of postgresql extension
  shell: psql -c "SELECT * FROM pg_extension;"
  args:
    executable: /bin/bash
  register: postgresql_plugin_list
  become: yes
  become_user: postgres
  become_method: sudo
  changed_when: False

- name: Enable the citus extension
  shell: psql -c "CREATE EXTENSION citus;"
  args:
    executable: /bin/bash
  register: enable_citus
  become: yes
  become_user: postgres
  become_method: sudo
  failed_when: '"CREATE EXTENSION" not in enable_citus.stdout'
  changed_when: False
  when: '"citus" not in postgresql_plugin_list.stdout'

- name: Get a list of active citus worker nodes
  shell: psql -c "SELECT * FROM master_get_active_worker_nodes();"
  args:
    executable: /bin/bash
  register: citus_active_worker_nodes
  become: yes
  become_user: postgres
  become_method: sudo
  changed_when: False

- name: Add the worker nodes to the citus coordinator
  shell: "psql -c \"SELECT * from master_add_node('{{ hostvars[item][citus_node_variable] }}', 5432);\""
  args:
    executable: /bin/bash
  register: citus_add_worker_node
  become: yes
  become_user: postgres
  become_method: sudo
  failed_when: 'hostvars[item][citus_node_variable] not in citus_add_worker_node.stdout'
  changed_when: False
  with_items: "{{ groups[citus_host_group] }}"
  when:
    - citus_coordinator
    - not hostvars[item]['citus_coordinator']
    - hostvars[item][citus_node_variable] not in citus_active_worker_nodes.stdout

- name: Custom Citus Configuration
  lineinfile:
    path: "{{ postgresql_conf_path }}/postgresql.conf"
    regexp: "^{{ item['line'] }}"
    line: "{{ item['line'] }}"
    state: "{{ item['state'] | default(omit) }}"
  with_items: "{{ citus_config }}"
  notify: Restart postgresql